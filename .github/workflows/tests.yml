name: Tests
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  create-install-dir-test:
    name: create_install_path.sh script test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Existing
        shell: bash
        env:
          INSTALL_PATH: '.sonar'
        run: |
          echo "- Create dir"
          mkdir -p "${INSTALL_PATH}"

          echo "- Test script behavior"
          ./scripts/create_install_path.sh > output
          grep -v "::error::" output

      - name: Non-existing nested in current dir
        shell: bash
        env:
          INSTALL_PATH: '.sonar'
        run: |
          ./scripts/create_install_path.sh > output
          grep -v "::error::" output
          test -d "${INSTALL_PATH}"

      - name: Nonexisting nested in home
        shell: bash
        env:
          INSTALL_PATH: '~/third_party/.sonar'
        run: |
          ./scripts/create_install_path.sh > output
          grep -v "::error::" output
          test -d "${INSTALL_PATH}"

      - name: Empty install dir specified
        shell: bash
        env:
          INSTALL_PATH: ''
        run: |
          (./scripts/create_install_path.sh || echo "=== Script failed ===") > output
          grep "::error::Empty installation path specified" output
          grep "=== Script failed ===" output

      - name: No permission to create directory
        shell: bash
        env:
          INSTALL_PATH: '/non_creatable'
        run: |
          (./scripts/create_install_path.sh || echo "=== Script failed ===") > output
          grep "::error::Failed to create non-existing installation path '/non_creatable'" output
          grep "=== Script failed ===" output

      - name: Existing but not directory
        shell: bash
        env:
          INSTALL_PATH: 'not_directory'
        run: |
          echo "- Create normal file"
          echo "content" > "${INSTALL_PATH}"

          echo "- Test script behavior"
          (./scripts/create_install_path.sh || echo "=== Script failed ===") > output
          grep "::error::Installation path 'not_directory' is not a directory" output
          grep "=== Script failed ===" output


      - name: Existing but not readable
        shell: bash
        env:
          INSTALL_PATH: 'not_readable'
        run: |
          echo "- Create dir and make it not readable"
          mkdir -p "${INSTALL_PATH}"
          chmod -r "${INSTALL_PATH}"

          echo "- Test script behavior"
          (./scripts/create_install_path.sh || echo "=== Script failed ===") > output
          grep "::error::Installation path 'not_readable' is not readable" output
          grep "=== Script failed ===" output

      - name: Existing but not writeable
        shell: bash
        env:
          INSTALL_PATH: 'not_writeable'
        run: |
          echo "- Create dir and make it not writeable"
          mkdir -p "${INSTALL_PATH}"
          chmod -w "${INSTALL_PATH}"

          echo "- Test script behavior"
          (./scripts/create_install_path.sh || echo "=== Script failed ===") > output
          grep "::error::Installation path 'not_writeable' is not writeable" output
          grep "=== Script failed ===" output

  setup-script-test:
    name: configure_paths.sh script test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Windows
        shell: bash
        env:
          OS: 'Windows'
          ARCH: 'X64'  
          INSTALL_PATH: 'install-directory'
          SONAR_HOST_URL: 'http://sonar-host.com'
          SONAR_SCANNER_VERSION: 'vX.Y.Z.MMMM'
        run: |
          ./scripts/configure_paths.sh > output
          grep -v "::error::" output

          echo "- Check sonar-scanner:"
          grep "sonar-scanner-url=https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-vX.Y.Z.MMMM-windows.zip" output
          grep "sonar-scanner-dir=install-directory/sonar-scanner-vX.Y.Z.MMMM-windows" output
          grep "sonar-scanner-bin=install-directory/sonar-scanner-vX.Y.Z.MMMM-windows/bin/sonar-scanner.bat" output

          echo "- Check build-wrapper:"
          grep "build-wrapper-url=http://sonar-host.com/static/cpp/build-wrapper-win-x86.zip" output
          grep "build-wrapper-dir=install-directory/build-wrapper-win-x86" output
          grep "build-wrapper-bin=install-directory/build-wrapper-win-x86/build-wrapper-win-x86-64.exe" output

      - name: Linux
        shell: bash
        env:
          OS: 'Linux'
          ARCH: 'X64'  
          INSTALL_PATH: 'install-directory'
          SONAR_HOST_URL: 'http://sonar-host.com'
          SONAR_SCANNER_VERSION: 'vX.Y.Z.MMMM'
        run: |
          ./scripts/configure_paths.sh > output
          grep -v "::error::" output

          echo "- Check sonar-scanner:"
          grep "sonar-scanner-url=https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-vX.Y.Z.MMMM-linux.zip" output
          grep "sonar-scanner-dir=install-directory/sonar-scanner-vX.Y.Z.MMMM-linux" output
          grep "sonar-scanner-bin=install-directory/sonar-scanner-vX.Y.Z.MMMM-linux/bin/sonar-scanner" output

          echo "- Check build-wrapper:"
          grep "build-wrapper-url=http://sonar-host.com/static/cpp/build-wrapper-linux-x86.zip" output
          grep "build-wrapper-dir=install-directory/build-wrapper-linux-x86" output
          grep "build-wrapper-bin=install-directory/build-wrapper-linux-x86/build-wrapper-linux-x86-64" output

      - name: macOSX
        shell: bash
        env:
          OS: 'macOS'
          ARCH: 'X64'  
          INSTALL_PATH: 'install-directory'
          SONAR_HOST_URL: 'http://sonar-host.com'
          SONAR_SCANNER_VERSION: 'vX.Y.Z.MMMM'
        run: |
          ./scripts/configure_paths.sh > output
          grep -v "::error::" output

          echo "- Check sonar-scanner:"
          grep "sonar-scanner-url=https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-vX.Y.Z.MMMM-macosx.zip" output
          grep "sonar-scanner-dir=install-directory/sonar-scanner-vX.Y.Z.MMMM-macosx" output
          grep "sonar-scanner-bin=install-directory/sonar-scanner-vX.Y.Z.MMMM-macosx/bin/sonar-scanner" output

          echo "- Check build-wrapper:"
          grep "build-wrapper-url=http://sonar-host.com/static/cpp/build-wrapper-macosx-x86.zip" output
          grep "build-wrapper-dir=install-directory/build-wrapper-macosx-x86" output
          grep "build-wrapper-bin=install-directory/build-wrapper-macosx-x86/build-wrapper-macosx-x86" output

      - name: Unssuported OS
        shell: bash
        env:
          OS: 'unsupportedOS'
          ARCH: 'X64'  
          INSTALL_PATH: 'install-directory'
          SONAR_HOST_URL: 'http://sonar-host.com'
          SONAR_SCANNER_VERSION: 'vX.Y.Z.MMMM'
        run: |
          (./scripts/configure_paths.sh  || echo "=== Script failed ===") > output

          echo "- Check errors:"
          grep "::error::Unsupported runner OS 'unsupportedOS'" output
          grep "=== Script failed ===" output

      - name: Unssuported architecture
        shell: bash
        env:
          OS: 'Linux'
          ARCH: 'X86'  
          INSTALL_PATH: 'install-directory'
          SONAR_HOST_URL: 'http://sonar-host.com'
          SONAR_SCANNER_VERSION: 'vX.Y.Z.MMMM'
        run: |
          (./scripts/configure_paths.sh  || echo "=== Script failed ===") > output

          echo "- Check errors:"
          grep "::error::Architecture 'X86' is unsupported by build-wrapper" output
          grep "=== Script failed ===" output


  download-script-test:
    name: download.sh script test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Download test without validation
        shell: bash
        env:
          INSTALL_PATH: 'install-directory'
          DOWNLOAD_URL: 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip'
          SHA_DOWNLOAD_URL: 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip.sha256'
          TMP_ZIP_PATH: ${{ runner.temp }}/sonar-scanner.zip
        run: |
          ./scripts/download.sh > output
          test -f "$TMP_ZIP_PATH"
          if [ -f "$TMP_ZIP_PATH.sha256" ]; then
            echo "$TMP_ZIP_PATH.sha256 shouldn't exist"
            exit 1
          fi
          grep -v "::error::" output
      - name: Download test with validation
        shell: bash
        env:
          INSTALL_PATH: 'install-directory-sha-validation'
          DOWNLOAD_URL: 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip'
          SHA_DOWNLOAD_URL: 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip.sha256'
          TMP_ZIP_PATH: ${{ runner.temp }}/sonar-scanner.zip
        run: |
          ./scripts/download.sh -v > output
          test -f "$TMP_ZIP_PATH"
          test -f "$TMP_ZIP_PATH".sha256
          grep -v "::error::" output
      - name: Incorrect install dir
        shell: bash
        env:
          INSTALL_PATH: ''
        run: |
          (./scripts/download.sh || echo "=== Script failed ===") > output
          grep "::error::Failed to create" output
          grep "=== Script failed ===" output
      - name: Incorrect download url
        shell: bash
        env:
          INSTALL_PATH: 'install-directory'
          DOWNLOAD_URL: 'incorrect-url'
        run: |
          (./scripts/download.sh || echo "=== Script failed ===") > output
          grep "::error::Failed to download 'incorrect-url'" output
          grep "=== Script failed ===" output
      - name: Incorrect SHA256 url
        shell: bash
        env:
          INSTALL_PATH: 'install-directory'
          DOWNLOAD_URL: 'https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip'
          SHA_DOWNLOAD_URL: incorrect-sha256-url
          TMP_ZIP_PATH: ${{ runner.temp }}/sonar-scanner.zip
        run: |
          (./scripts/download.sh -v || echo "=== Script failed ===") > output
          grep "::error::Failed to download 'incorrect-sha256-url'" output
          grep "=== Script failed ===" output

  output-test:
    name: Test action outputs
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        cache: [true, false]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Run SonarCloud C/C++ action
        id: run-action
        uses: ./
        with:
          cache-binaries: ${{ matrix.cache }}

      - name: SONAR_HOST_URL is set
        shell: bash
        run: |
          [[ $SONAR_HOST_URL == "https://sonarcloud.io" ]]

      - name: sonar-scanner is installed and in PATH
        run: |
          sonar-scanner --help | grep "INFO: usage: sonar-scanner "

      - name: sonar-scanner-binary output is correct
        shell: bash
        env:
          BINARY: ${{ steps.run-action.outputs.sonar-scanner-binary }}
        run: |
          "$BINARY" --help | grep "INFO: usage: sonar-scanner "

      # build-wrapper does not have --help or equivalent option.
      # Pass to few arguments and ignore error code
      - name: build-wrapper is installed and in PATH on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          (build-wrapper-win-x86-64.exe || true) | grep "build-wrapper, version "

      - name: build-wrapper is installed and in PATH on Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          (build-wrapper-linux-x86-64 || true) | grep "build-wrapper, version "

      - name: build-wrapper is installed and in PATH on macOS
        if: runner.os == 'macOs'
        shell: bash
        run: |
          (build-wrapper-macosx-x86 || true) | grep "build-wrapper, version "

      - name: build-wrapper-binary output is correct
        shell: bash
        env:
          BINARY: ${{ steps.run-action.outputs.build-wrapper-binary }}
        run: |
          ("$BINARY" || true) | grep "build-wrapper, version "
