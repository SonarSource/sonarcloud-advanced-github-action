name: 'CFamily github actuin'
description: 'Analyze C++ project using SonarQube/SonarCloud'
inputs:
  installation-dir:
    desciprtion: 'Directory where the sonnar-scanner and build wrapper will be installed.'
    required: false
    default: '.sonar'
# This should be changed to constants in action
  sonar-qube-url:
    description: 'Address of the SonarQube instance if used. If not specified SonarCloud is used.'
    required: false
    default: 'https://sonarcloud.io'
  sonar-scanner-version:
    description: 'Version of the SonarScanner to use, defaults to latest.'
    required: false
    default: '4.6.2.2472'
outputs:
  sonar-scanner-binary:
    description: "Absolute path to sonar-scanner binary."
    value: ${{ steps.configure-enviroment.outputs.sonar-scanner-binary }}
  build-wrapper-binary:
    description: "Absolute path to build-wrapper binary."
    value: ${{ steps.configure-enviroment.outputs.build-wrapper-binary }}


runs:
  using: "composite"
  steps:
    - id: setup
      shell: bash
      env:
        OS: ${{ runner.os }}
        INSTALL_DIR: ${{ inputs.installation-dir }}
        SONAR_HOST_URL: ${{ inputs.sonar-qube-url }}
        SONAR_SCANNER_VERSION: ${{ inputs.sonar-scanner-version }}  
      run: ${GITHUB_ACTION_PATH}/setup.sh >> $GITHUB_OUTPUT

    - id: cache-sonar-tools
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-${{ inputs.sonar-scanner-version }}
        path: ${{ inputs.installation-dir }}

    - id: install-sonar-scanner
      if: steps.cache-sonar-tools.outputs.cache-hit != 'true'
      shell: bash
      env:
        DOWNLOAD_URL: ${{ steps.setup.outputs.sonar-scanner-url }}
        INSTALL_DIR: ${{ inputs.installation-dir }}
        TMP_ZIP_PATH: ${{ runner.temp }}/sonar-scanner.zip
      run: |
        mkdir -p "${INSTALL_DIR}"
        curl -sSLo "${TMP_ZIP_PATH}" "${DOWNLOAD_URL}"
        unzip -o  -d "${INSTALL_DIR}" "${TMP_ZIP_PATH}"

    - id: install-build-wrapper
      if: steps.cache-sonar-tools.outputs.cache-hit != 'true'
      shell: bash
      env:
        DOWNLOAD_URL: ${{ steps.setup.outputs.build-wrapper-url }}
        INSTALL_DIR: ${{ inputs.installation-dir }}
        TMP_ZIP_PATH: ${{ runner.temp }}/build-wrapper.zip
      run: |
        mkdir -p "${INSTALL_DIR}"
        curl -sSLo "${TMP_ZIP_PATH}" "${DOWNLOAD_URL}"
        unzip -o  -d "${INSTALL_DIR}" "${TMP_ZIP_PATH}"

    - id: configure-enviroment
      shell: bash
      env:
        SONAR_HOST_URL: ${{ inputs.sonar-qube-url }}
        SONAR_SCANNER_DIR: ${{ steps.setup.outputs.sonar-scanner-dir }}
        SONAR_SCANNER_BIN: ${{ steps.setup.outputs.sonar-scanner-bin }}
        BUILD_WRAPPER_DIR: ${{ steps.setup.outputs.build-wrapper-dir }}
        BUILD_WRAPPER_BIN: ${{ steps.setup.outputs.build-wrapper-bin }}
      run: |
        realpath() {
          case ${RUNNER_OS} in
            Windows)
              cygpath --absolute --windows "$1"
              ;;
            Linux)
              readlink -f "$1"  
              ;;
            macOS)
              # TODO: Fix macOs to preodcue canonical path
              echo "$(pwd)/$1"
              ;;
          esac
        }  
       
        echo "::group::Action outputs" 
        echo "SONAR_HOST_URL=${SONAR_HOST_URL}" >> $GITHUB_ENV

        SONAR_SCANNER_DIR=$(realpath "${SONAR_SCANNER_DIR}")
        echo "${SONAR_SCANNER_DIR}" >> $GITHUB_PATH

        SONAR_SCANNER_BIN=$(realpath "${SONAR_SCANNER_BIN}")
        echo "sonar-scanner-binary=${SONAR_SCANNER_BIN}" >> $GITHUB_OUTPUT
        
        BUILD_WRAPPER_DIR=$(realpath "${BUILD_WRAPPER_DIR}")
        echo "${BUILD_WRAPPER_DIR}" >> $GITHUB_PATH

        BUILD_WRAPPER_BIN=$(realpath "${BUILD_WRAPPER_BIN}")
        echo "build-wrapper-binary=${BUILD_WRAPPER_BIN}" >> $GITHUB_OUTPUT

        echo "Action outputs:"
        echo " * '${SONAR_SCANNER_DIR}' added to the path"
        echo " * 'sonar-scanner-binary' output set to '${SONAR_SCANNER_BIN}'"
        echo " * 'SONAR_HOST_URL' enviroment variable set to '${SONAR_HOST_URL}'"
        echo " * '${BUILD_WRAPPER_DIR}' added to the path"
        echo " * 'build-wrapper-binary' output set to '${BUILD_WRAPPER_BIN}'"

