name: 'CFamily github action'
description: 'Analyze C++ project using SonarQube/SonarCloud'
inputs:
  installation-path:
    description: 'Directory where the sonnar-scanner and build wrapper will be installed. Created if does not exists.'
    required: false
    default: '.sonar'
  cache-binaries:
    description: 'Controls if installed binaries are cached using GitHub cache.'
    required: false
    default: 'true'

# This should be changed to constants in action
  sonar-qube-url:
    description: 'Address of the SonarQube instance if used. If not specified SonarCloud is used.'
    required: false
    default: 'https://sonarcloud.io'
  sonar-scanner-version:
    description: 'Version of the SonarScanner to use, defaults to latest.'
    required: false
    default: '4.6.2.2472'
outputs:
  sonar-scanner-binary:
    description: "Absolute path to sonar-scanner binary."
    value: ${{ steps.setup-outputs.outputs.sonar-scanner-binary }}
  build-wrapper-binary:
    description: "Absolute path to build-wrapper binary."
    value: ${{ steps.setup-outputs.outputs.build-wrapper-binary }}


runs:
  using: "composite"
  steps:
    # install packaged required for greadlink and sha256sum command on macOS
    - name: Install required packages for macOS
      if: runner.os == 'macOS'
      shell: bash
      run: brew install coreutils

    - name: Verify and create installation path
      shell: bash
      env:
        INSTALL_PATH: ${{ inputs.installation-path }}
      run: ${GITHUB_ACTION_PATH}/create_install_path.sh

    - id: setup
      shell: bash
      env:
        OS: ${{ runner.os }}
        INSTALL_PATH: ${{ inputs.installation-path }}
        SONAR_HOST_URL: ${{ inputs.sonar-qube-url }}
        SONAR_SCANNER_VERSION: ${{ inputs.sonar-scanner-version }}
      run: ${GITHUB_ACTION_PATH}/setup.sh >> $GITHUB_OUTPUT

    - name: Cache sonar-scanner installation
      id: cache-sonar-tools
      if: inputs.cache-binaries == 'true'
      uses: actions/cache@v3
      with:
        key: sonar-scanner-${{ runner.os }}-${{ inputs.sonar-scanner-version }}
        path: ${{ steps.setup.outputs.sonar-scanner-dir }}

    - name: Download and install sonar-scanner
      if: steps.cache-sonar-tools.outputs.cache-hit != 'true'
      shell: bash
      env:
        DOWNLOAD_URL: ${{ steps.setup.outputs.sonar-scanner-url }}
        SHA_DOWNLOAD_URL: ${{ steps.setup.outputs.sonar-scanner-url }}.sha256
        INSTALL_PATH: ${{ inputs.installation-path }}
        TMP_ZIP_PATH: ${{ runner.temp }}/sonar-scanner.zip
      run: ${GITHUB_ACTION_PATH}/download.sh -v

    - name: Download and install build-wrapper
      shell: bash
      env:
        DOWNLOAD_URL: ${{ steps.setup.outputs.build-wrapper-url }}
        INSTALL_PATH: ${{ inputs.installation-path }}
        TMP_ZIP_PATH: ${{ runner.temp }}/build-wrapper.zip
      run: ${GITHUB_ACTION_PATH}/download.sh

    - name: Setup action outputs
      id: setup-outputs
      shell: bash
      env:
        SONAR_HOST_URL: ${{ inputs.sonar-qube-url }}
        SONAR_SCANNER_DIR: ${{ steps.setup.outputs.sonar-scanner-dir }}
        SONAR_SCANNER_BIN: ${{ steps.setup.outputs.sonar-scanner-bin }}
        BUILD_WRAPPER_DIR: ${{ steps.setup.outputs.build-wrapper-dir }}
        BUILD_WRAPPER_BIN: ${{ steps.setup.outputs.build-wrapper-bin }}
      run: |
        source ${GITHUB_ACTION_PATH}/utils.sh

        echo "::group::Action outputs"
        echo "SONAR_HOST_URL=${SONAR_HOST_URL}" >> $GITHUB_ENV
        echo "'SONAR_HOST_URL' enviroment variable set to '${SONAR_HOST_URL}'"

        SONAR_SCANNER_BIN_DIR=$(realpath "${SONAR_SCANNER_DIR}/bin")
        echo "${SONAR_SCANNER_BIN_DIR}" >> $GITHUB_PATH
        echo "'${SONAR_SCANNER_BIN_DIR}' added to the path"

        SONAR_SCANNER_BIN=$(realpath "${SONAR_SCANNER_BIN}")
        echo "sonar-scanner-binary=${SONAR_SCANNER_BIN}" >> $GITHUB_OUTPUT
        echo "'sonar-scanner-binary' output set to '${SONAR_SCANNER_BIN}'"

        BUILD_WRAPPER_BIN_DIR=$(realpath "${BUILD_WRAPPER_DIR}")
        echo "${BUILD_WRAPPER_BIN_DIR}" >> $GITHUB_PATH
        echo "'${BUILD_WRAPPER_BIN_DIR}' added to the path"

        BUILD_WRAPPER_BIN=$(realpath "${BUILD_WRAPPER_BIN}")
        echo "build-wrapper-binary=${BUILD_WRAPPER_BIN}" >> $GITHUB_OUTPUT
        echo "'build-wrapper-binary' output set to '${BUILD_WRAPPER_BIN}'"
        echo "::endgroup::"

